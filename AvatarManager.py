# meta developer: @space_modules
# meta name: AvatarManager
# meta version: 1.0

import os
import asyncio
import re
import aiohttp
from telethon.tl.functions.photos import UploadProfilePhotoRequest, DeletePhotosRequest
from .. import loader, utils

@loader.tds
class AvatarManagerMod(loader.Module):
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∞–º–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    strings = {
        "name": "AvatarManager",
        "no_reply": "<b><emoji document_id=5328145443106873128>‚úñÔ∏è</emoji> –ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ñ–æ—Ç–æ.</b>",
        "no_args_count": "<b><emoji document_id=5328145443106873128>‚úñÔ∏è</emoji> –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.</b>",
        "invalid_count": "<b><emoji document_id=5328145443106873128>‚úñÔ∏è</emoji> –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.</b>",
        "added": "<b>‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {} –∞–≤–∞—Ç–∞—Ä–æ–∫.</b>",
        "removed": "<b>‚úÖ –£–¥–∞–ª–µ–Ω–æ {} –∞–≤–∞—Ç–∞—Ä–æ–∫.</b>",
        "removed_all": "<b>‚úÖ –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ –∞–≤–∞—Ç–∞—Ä–∫–∏.</b>",
        "processing": "<b><emoji document_id=5213452399767299271>‚è≥</emoji> –û–±—Ä–∞–±–æ—Ç–∫–∞...</b>",
        "adding": "<b>‚è≥ –î–æ–±–∞–≤–ª—è—é –∞–≤–∞—Ç–∞—Ä–∫–∏, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...</b>",
        "added_count": "<b>‚è≥ –î–æ–±–∞–≤–ª—è—é –∞–≤–∞—Ç–∞—Ä–∫–∏...\n–£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {}.</b>",
        "no_avatars_to_delete": "<b><emoji document_id=5328145443106873128>‚úñÔ∏è</emoji> –ù–µ—Ç –∞–≤–∞—Ç–∞—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.</b>",
        "error": "<b>‚ùå –û—à–∏–±–∫–∞:</b> <code>{}</code>\n\n<b><emoji document_id=5818945725048161988>üí°</emoji> –†–µ—à–µ–Ω–∏–µ:</b> <code>–ß–∞—â–µ –≤—Å–µ–≥–æ —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ Telegram (—Ñ–ª—É–¥). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.</code>",
        "no_reply_or_link": "<b><emoji document_id=5328145443106873128>‚úñÔ∏è</emoji> –ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ñ–æ—Ç–æ –∏–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É.</b>",
        "invalid_url": "<b><emoji document_id=5328145443106873128>‚úñÔ∏è</emoji> –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.</b>\n\n<b><emoji document_id=5818945725048161988>üí°</emoji> –†–µ—à–µ–Ω–∏–µ:</b> <code>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –ø—Ä—è–º–∞—è –∏ –≤–µ–¥–µ—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ .jpg, .png), –∞ –Ω–µ –Ω–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É.</code>",
    }
    
    strings_ru = {
        "_cls_doc": "–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∞–º–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è",
        "avataradd.ru_doc": "<–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <–æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ/—Å—Å—ã–ª–∫–∞> - –î–æ–±–∞–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫–∏",
        "avatarrem.ru_doc": "<–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> - –£–¥–∞–ª–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫–∏",
        "avatarremall.ru_doc": "- –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∞–≤–∞—Ç–∞—Ä–∫–∏",
    }


    async def client_ready(self, client, db):
        self.client = client

    @loader.command(
        ru_doc="<–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <–æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ/—Å—Å—ã–ª–∫–∞> - –î–æ–±–∞–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫–∏"
    )
    async def avataradd(self, message):
        """<count> <reply to photo / link> - Add avatars"""
        reply = await message.get_reply_message()
        args = utils.get_args(message)

        if not args:
            return await utils.answer(message, self.strings("no_args_count"))

        try:
            count = int(args[0])
            if count <= 0:
                return await utils.answer(message, self.strings("invalid_count"))
        except (ValueError, IndexError):
            return await utils.answer(message, self.strings("invalid_count"))

        temp_file = "temp_avatar.jpg"
        
        source_found = False
        if reply and reply.photo:
            await self.client.download_media(reply.photo, temp_file)
            source_found = True
        elif len(args) > 1 and re.match(r'https?://\S+', args[1]):
            url = args[1]
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.get(url, ssl=False) as response:
                        if response.status == 200:
                            with open(temp_file, "wb") as f:
                                f.write(await response.read())
                            source_found = True
                        else:
                            return await utils.answer(message, self.strings("invalid_url"))
            except Exception as e:
                error_message = self.strings("invalid_url") + f"\n\n<b>–î–µ—Ç–∞–ª–∏:</b> <code>{e}</code>"
                if os.path.exists(temp_file):
                    os.remove(temp_file)
                return await utils.answer(message, error_message)
        
        if not source_found:
            return await utils.answer(message, self.strings("no_reply_or_link"))

        status_message = await utils.answer(message, self.strings("adding"))
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –û–î–ò–ù –†–ê–ó, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ —Ö—ç–Ω–¥–ª
            file_handle = await self.client.upload_file(temp_file)
            
            for i in range(count):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                await self.client(UploadProfilePhotoRequest(file=file_handle))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–∂–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ñ–ª—É–¥–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
                if (i + 1) % 10 == 0 or (i + 1) == count:
                    await utils.answer(status_message, self.strings("added_count").format(i + 1))
                
                # –£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                await asyncio.sleep(0.3)

        except Exception as e:
            return await utils.answer(status_message, self.strings("error").format(e))
        finally:
            if os.path.exists(temp_file):
                os.remove(temp_file)
        
        await utils.answer(status_message, self.strings("added").format(count))

    @loader.command(
        ru_doc="<–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> - –£–¥–∞–ª–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫–∏"
    )
    async def avatarrem(self, message):
        """<count> - Remove avatars"""
        args = utils.get_args_raw(message)

        if not args or not args.isdigit():
            return await utils.answer(message, self.strings("no_args_count"))

        count = int(args)
        if count <= 0:
            return await utils.answer(message, self.strings("invalid_count"))
            
        status_message = await utils.answer(message, self.strings("processing"))

        try:
            photos = await self.client.get_profile_photos('me', limit=count)
            
            if not photos:
                return await utils.answer(status_message, self.strings("no_avatars_to_delete"))
            
            await self.client(DeletePhotosRequest(id=photos))
            await utils.answer(status_message, self.strings("removed").format(len(photos)))
        except Exception as e:
            await utils.answer(status_message, self.strings("error").format(e))

    @loader.command(
        ru_doc="- –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∞–≤–∞—Ç–∞—Ä–∫–∏"
    )
    async def avatarremall(self, message):
        """- Remove all avatars"""
        status_message = await utils.answer(message, self.strings("processing"))
        
        try:
            photos = await self.client.get_profile_photos('me')
            
            if not photos:
                return await utils.answer(status_message, self.strings("no_avatars_to_delete"))

            await self.client(DeletePhotosRequest(id=photos))
            await utils.answer(status_message, self.strings("removed_all"))
        except Exception as e:
            await utils.answer(status_message, self.strings("error").format(e))
